{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf130
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Verdana;\f2\fmodern\fcharset0 Courier;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red59\green59\blue59;\red117\green117\blue117;
\red236\green236\blue236;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\margl1440\margr1440\vieww24120\viewh12280\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0                                                                                                                                                  
\b\fs28 ASSIGNMENT 3 - RECORD MANAGER\
\
\
GROUP MEMBERS :\
\
Raghu Vemuri                     A20330947\
Shravani Mynampally        A20353201\
Shruthi Adamala                A20322526\
\
\

\b0 In this assignment we implement a record manager that inserts, deletes, updates as well as allows navigation through the records. \
\
\
\
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl320\sa80\partightenfactor0
\ls1\ilvl0
\f1\b\fs26 \cf2 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Record Representation
\b0 : Since the data types we consider here are all of fixed length, the size of a record is fixed too.\
\ls1\ilvl0
\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Page Layout
\b0 : We define how to layout records on pages by reserving some space on each page for managing the entries on the page. \
\ls1\ilvl0
\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Table information pages
\b0 : Information on how many pages of a page file are reserved.\
\ls1\ilvl0
\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Record IDs
\b0 : We use record IDs as a combination of page and slot number.\
\ls1\ilvl0
\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Free Space Management
\b0 :  To track free space on pages, we link pages with free space by reserving space for a pointer to the next free space on each page. One of the table information pages can then have a pointer to the first page with free space. 
\f0\fs28 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\sl340\sa288\partightenfactor0

\f1\b \cf3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 tables.h\
\pard\pardeftab720\sl320\sa260\partightenfactor0

\b0\fs26 \cf2 \strokec2 The header tables.h defines the basic data structures for schemas, tables, records, record ids (RIDs), and values as well as functions for serializing these data structures as strings. There exists a serialization function (
\f2 rm_serializer.c
\f1 ) and  four datatypes : integer, float , strings of a fixed length , and boolean. A record is simply a 
\f2 rid
\f1  consisting of a page number and slot number.\
\pard\pardeftab720\sl320\sa345\partightenfactor0

\b \cf2 Schema\
\pard\pardeftab720\sl320\sa260\partightenfactor0

\b0 \cf2 A schema consists of a number of attributes and each attribute having its name (
\f2 attrNames
\f1 ) and data type (
\f2 dataTypes
\f1 ). 
\f0\fs28 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\
\pard\pardeftab720\sl340\sa288\partightenfactor0

\f1\b \cf3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 expr.h\
\pard\pardeftab720\sl320\sa260\partightenfactor0

\b0\fs26 \cf2 \strokec2 The header expr.h defines data structures and functions which are implemented in 
\f2 expr.c
\f1 . Expressions can either be constants , references to attribute values , or comparison operators (equals and smaller) that are defined for all data types and boolean operators 
\f2 AND
\f1 , 
\f2 OR
\f1 , and 
\f2 NOT
\f1 . Operators have one or more expressions as input. \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs28 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
\
\pard\pardeftab720\sl340\sa288\partightenfactor0

\f1\b \cf3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 record_mgr.h\
\pard\pardeftab720\sl320\sa260\partightenfactor0

\b0\fs26 \cf2 \strokec2  
\f2 record_mgr.h 
\f1 defines the interface of the record manager. The types of functions used here in this are stated below:\

\b Table and Record Manager Functions\

\b0 initialise\
shut down\
create \
open \
close\
\pard\pardeftab720\sl320\sa345\partightenfactor0

\b \cf2 Record Functions\
\pard\pardeftab720\sl320\sa260\partightenfactor0

\b0 \cf2 Retrieve\
Delete \
Insert \
Update\
\
\pard\pardeftab720\sl320\sa345\partightenfactor0

\b \cf2 Scan Functions\
\pard\pardeftab720\sl320\sa260\partightenfactor0

\b0 \cf2  
\f2 RM_ScanHandle\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs28 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
\
\pard\pardeftab720\sl320\sa345\partightenfactor0

\f1\b\fs26 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Schema Functions\
\pard\pardeftab720\sl320\sa260\partightenfactor0

\b0 \cf2 They return the size in bytes of records for a given schema and create a new schema.\
\
\pard\pardeftab720\sl320\sa345\partightenfactor0

\b \cf2 Attribute Functions\
\pard\pardeftab720\sl320\sa260\partightenfactor0

\b0 \cf2 get attribute\
set attribute\
create a new record\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs28 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 We implement the following methods in this assignment:\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\sl300\partightenfactor0

\f2\fs26 \cf4 \cb5 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 // table and manager
\f0\fs28 \cf0 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \

\b extern
\b0  RC initRecordManager ( 
\b void
\b0  *mgmtData );                                 // Record Manager Initiation.\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\b \cf0 extern
\b0  RC shutdownRecordManager ( );                                                 // Shuts down the Record Manager and clears the memory that was created during the implementation.\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\b \cf0 extern
\b0  RC createTable ( 
\b char 
\b0 *name,
\b  schema 
\b0 *schema );                     // Creates a table for the given Schema.\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0  \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\b \cf0 extern
\b0  RC openTable ( RM_TableData *rel, 
\b char 
\b0 *name );                     // Opens a table for the given table name and fetches the data into memory\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\b \cf0 extern
\b0  RC closeTable ( RM_TableData *rel );                                         // Closes the tables which are open.\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\b \cf0 extern
\b0  RC deleteTable ( 
\b char 
\b0 *name);                                                   // Deletes the table and extracts the memory from the initiated storage and buffer managers.\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\b \cf0 extern
\b0  
\b int
\b0  getNumTuples ( RM_TableData *rel );                                   // gets the count of the tuples from the relation that is created. \
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\sl300\partightenfactor0

\f2\fs26 \cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 // handling records in a table\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs28 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 extern
\b0  RC insertRecord ( RM_TableData *rel, Record *record );              // Inserts Record into the table and stores the relevant data into the table named RM_TableData.
\f2\fs26 \cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 \
\pard\pardeftab720\sl300\partightenfactor0
\cf4 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs28 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 extern
\b0  RC deleteRecord ( RM_TableData *rel, RID id );                           // Deletes the specified ID from the table named RM_TableData and releases  its memory.
\f2\fs26 \cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 \
\pard\pardeftab720\sl300\partightenfactor0
\cf4 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs28 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 extern
\b0  RC updateRecord ( RM_TableData *rel, Record *record );            // Updates the schema of the table and data for the given RID and sets it to the record values which are passed.
\f2\fs26 \cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 \
\pard\pardeftab720\sl300\partightenfactor0
\cf4 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs28 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 extern
\b0  RC getRecord ( RM_TableData *rel, RID id, Record *record );     // retrieves the record which is specified or passed by the RID.
\f2\fs26 \cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 \
\pard\pardeftab720\sl300\partightenfactor0
\cf4 \
\
\
\
\
// scans\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs28 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 extern
\b0  RC startScan ( RM_TableData *rel, RM_ScanHandle *scan, Expr *cond );        // Initiates scan method and gets all the data which would be helpful later, into the memory.
\f2\fs26 \cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 \
\pard\pardeftab720\sl300\partightenfactor0
\cf4 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs28 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 extern
\b0  RC next ( RM_ScanHandle *scan, Record *record );                                         // Gets the next record from the table.\
\

\b extern
\b0  RC closeScan ( RM_ScanHandle *scan );                                                         // Ends the scan method and releases the memory that has been used.\

\f2\fs26 \cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 \
\pard\pardeftab720\sl300\partightenfactor0
\cf4 \
\
\
// dealing with schemas\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs28 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 extern
\b0  
\b int
\b0   getRecordSize ( schema *schema );                                                                                                                                                                    // Retrieves the Size of the record.\

\f2\fs26 \cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 \

\f0\b\fs28 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 extern 
\b0 schema *createSchema ( 
\b int 
\b0 numAttr, 
\b char 
\b0 **attrNames, DataType *dataTypes, 
\b int 
\b0 *typeLength, 
\b int 
\b0 keySize,
\b  int 
\b0 *keys
\b  
\b0 );                                    // Creates the schema of the table and writes it into Page file.
\f2\fs26 \cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 \
\

\f0\b\fs28 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 extern
\b0  RC freeSchema ( schema *schema );                                                                                                                                                                       // Frees the shame from the page file.
\f2\fs26 \cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 \
\pard\pardeftab720\sl300\partightenfactor0
\cf4 \
\
\
\
\
// dealing with records and attribute values\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs28 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 extern
\b0  RC createRecord ( record **record,
\b  
\b0 schema
\b  
\b0 *schema );                                          // Creates a new record.
\f2\fs26 \cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 \
\pard\pardeftab720\sl300\partightenfactor0
\cf4 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs28 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 extern
\b0  RC freeRecord ( Record *record );                                                                           // Frees the record.\

\f2\fs26 \cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 \

\f0\b\fs28 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 extern
\b0  RC getAttr ( Record *record, 
\b  
\b0 schema
\b  
\b0 *schema,  
\b int 
\b0 attrNum, Value **
\b value
\b0  );      // gets the attribute values based on the attributes passed through attrNum.
\f2\fs26 \cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 \
\pard\pardeftab720\sl300\partightenfactor0
\cf4 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs28 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 extern
\b0  RC setAttr ( Record *record, 
\b  
\b0 schema
\b  
\b0 *schema,  
\b int 
\b0 attrNum, Value **
\b value
\b0  );     // sets the attribute values based on the attribute number and value passed through attrNum and value.
\f2\fs26 \cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 \
\pard\pardeftab720\sl300\partightenfactor0
\cf4 \
}